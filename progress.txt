Problem 1: Multiples of 3 and 5
  Begun: 10/2/2014
  Completed: 10/2/2014
  Notes: Had to adjust range to (1, 1000) b/c 1000 is outside the desired test range

Problem 2: Even Fibonacci Numbers
  Begun: 10/2/2014
  Completed: 10/2/2014
  Notes: 

Problem 3: Largest Prime Factor
  Begun: 10/2/2014
  Completed: 10/2/2014
  Notes: Had to make sure to not test for divisible by 1 as a criteria for prime. Once fixed, program ran correctly.
  Updated: 10/8/2014 - isPrime updated to be faster (necessary for problem 10)

Problem 4: Largest Palindrome Product
  Begun: 10/2/2014
  Completed: 10/2/2014
  Notes: list.reverse() doesn't return anything - it just reverses the list its called on

Problem 5: Smallest Multiple
  Begun: 10/2/2014
  Completed: 10/2/2014
  Notes:

Problem 6: Sum Square Difference
  Begun: 10/3/2014
  Completed: 10/3/2014
  Notes:

Problem 7: 10001st prime
  Begun: 10/03/2014
  Completed: 10/3/2014 
  Notes: Program runs slowly b/c prime number checker is not particularly quick. To speed up program, have to optimize my isPrime() fxn in problem 3.

Problem 8: Largest Product in a series
  Begun: 10/6/2014
  Completed: 10/6/2014
  Notes: used file i/o fxns for practice

Problem 9: Special Pythagorean Triplet
  Begun: 10/6/2014
  Completed: 10/6/2014
  Notes:

Problem 10: Summation of Primes
  Begun: 10/6/2014
  Completed: 10/6/2014
  Notes: isPrime() fxn is really slow when getting up to this level of prime calculation - may be worth writing another fxn if huge primes keep showing up in problem list.

Problem 11: Largest Product in a Grid
  Begun: 10/6/2014
  Completed: 10/6/2014
  Notes: Divided checking into 4 functions (horizontal, vertical, forward diagonal, and backward diagonal), sorted the returns of each function and printed the highest one to terminal. 

  Assumed that lists did not wrap for horizontal/vertical checking

Problem 12: Highly Divisible Triangular Number
  Begun: 10/6/2014
  Completed: 10/8/2014
  Notes: Updated the getFactors() funtion to a) only count factors (not append them to a list) and b) to only check if values up to the sqrt of the test value were factors (and if so add 2 to the factor counter). This change in b) necessitated that each test value is checked to see if it is a perfect square - if it is then one is subtracted from the factor counter (because the perfect square is effectively counted twice).

Problem 13: Large Sum
  Begun: 10/8/2014
  Completed: 10/8/2014
  Notes: In python, can just add all the numbers with no overflow errors. However, to keep in the spirit of the question, I rounded all numbers to their 10 most significant digits, added all of those sums, and then sliced the resulting answer into its most significant 10 digits.

Problem 14: Longest Collatz Sequence
  Begun: 10/8/2014
  Completed: 10/8/2014
  Notes: calcNextCollatz() could probably be accomplished more efficiently if recursion was used. However, for easier reading/keeping track of the length of the chain, I chose to  implement it non-recursively and control it with a while loop in the main mehtod.

Problem 15: Lattice Paths
  Begun: 10/13/2014
  Completed: 10/13/2014
  Notes: Implemented based on info from "http://www.robertdickau.com/lattices.html"
  Implemented makeLatticeNet to return both the root of the lattice and the highest frequency of the net. Highest freq is equal to the number of paths in the lattice and is printed in the main method

Problem 16: Power Digit Sum
  Begun: 10/13/2014
  Completed: 10/13/2014
  Notes:

Problem 17: Number Letter Counts
  Begun: 10/13/2014
  Completed:
  Notes: Off by 36 letters - cannot find error. Will revisit and try to correct





  



